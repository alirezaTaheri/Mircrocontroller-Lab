;/*
; * PWM_DC_Motor.c
; *
; * Created: 31/10/2019 02:35:49 È.Ù
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdbool.h>
;#include <alcd.h>
;#include <string.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;#define DEBOUNCE_TIME 2
;int increasePressedCount;
;int decreasePressedCount;
;int bothPressedCount = 0;
;bool increasePressed;
;bool decreasePressed;
;
;void enterConfigureMode();
;void exitConfigureMode();
;void clearNCharOnXY(int n, int x, int y);
;void showStringOnXY(int x, int y, char *string);
;char* toString(unsigned long x);
;bool reversed = false;
;bool configureMode = false;
;int stepSize = 60;

	.DSEG
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021    if (increasePressed)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0022        increasePressedCount++;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0023 
; 0000 0024    if (decreasePressed)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0025        decreasePressedCount++;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0026 
; 0000 0027    if (increasePressed && decreasePressed)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0028        bothPressedCount++;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0029    else bothPressedCount = 0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002A 
; 0000 002B    if (increasePressed && decreasePressed && bothPressedCount == DEBOUNCE_TIME && configureMode){
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002C        configureMode = false;
;PCODE: $00000037 VOL: 0
; 0000 002D        exitConfigureMode();
;PCODE: $00000038 VOL: 0
; 0000 002E        bothPressedCount++;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002F 
; 0000 0030        }
; 0000 0031 
; 0000 0032    if (increasePressed && decreasePressed && bothPressedCount == DEBOUNCE_TIME && !configureMode){
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0033        configureMode = true;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0034        enterConfigureMode();
;PCODE: $0000004C VOL: 0
; 0000 0035        }
; 0000 0036 
; 0000 0037    if (!configureMode && increasePressed && increasePressedCount >= DEBOUNCE_TIME){
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0038    if (!reversed){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0039       if (OCR1A + stepSize <= 511){
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003A          OCR1A += stepSize;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003B       }else {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 003C          OCR1A  = 511;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003D       }
;PCODE: $00000068 VOL: 0
; 0000 003E    }else{
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003F      if (OCR1B - stepSize <= OCR1B)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0040          OCR1B -= stepSize;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0041       else {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0042          OCR1B  = 0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0043          reversed = false;
;PCODE: $0000007A VOL: 0
; 0000 0044       }
;PCODE: $0000007B VOL: 0
; 0000 0045    }
;PCODE: $0000007C VOL: 0
; 0000 0046    clearNCharOnXY(0,0,0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0047    showStringOnXY(0,0,toString(OCR1A));
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0048    delay_ms(10);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0049    clearNCharOnXY(0,0,1);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 004A    showStringOnXY(0,1,toString(OCR1B));
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 004B    }
; 0000 004C     if (!configureMode && decreasePressed && decreasePressedCount >= DEBOUNCE_TIME){
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 004D         if (!reversed){
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 004E       if (OCR1A - stepSize <= OCR1A)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 004F          OCR1A -= stepSize;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0050       else {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0051          OCR1A  = 0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0052          reversed = true;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0053       }
;PCODE: $000000C1 VOL: 0
; 0000 0054    }else{
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0055      if (OCR1B + stepSize <= 511)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0056          OCR1B += stepSize;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0057       else {
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0058          OCR1B  = 511;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0059       }
;PCODE: $000000D1 VOL: 0
; 0000 005A    }
;PCODE: $000000D2 VOL: 0
; 0000 005B    clearNCharOnXY(0,0,0);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 005C    showStringOnXY(0,0,toString(OCR1A));
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 005D    delay_ms(10);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 005E    clearNCharOnXY(0,0,1);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 005F    showStringOnXY(0,1,toString(OCR1B));
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0060     }
; 0000 0061 
; 0000 0062     if (configureMode && increasePressed && increasePressedCount >= DEBOUNCE_TIME){
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0063         stepSize++;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0064         clearNCharOnXY(0,0,1);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0065         showStringOnXY(0,1,toString(stepSize));
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0066     }
; 0000 0067 
; 0000 0068     if (configureMode && decreasePressed && decreasePressedCount >= DEBOUNCE_TIME){
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0069         stepSize--;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 006A         clearNCharOnXY(0,0,1);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 006B         showStringOnXY(0,1,toString(stepSize));
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 006C     }
; 0000 006D     /*
; 0000 006E    if (increasePressed && increasePressedCount >= DEBOUNCE_TIME){
; 0000 006F     if (increasePressedCount % DEBOUNCE_TIME == DEBOUNCE_TIME -1){
; 0000 0070        if (OCR1AL + 10 <= 254){
; 0000 0071        OCR1AL+=10;
; 0000 0072        clearNCharOnXY(6,0, 1);
; 0000 0073        showStringOnXY(0, 1, toString(OCR1AL));
; 0000 0074        }
; 0000 0075        else {OCR1AL = 254;
; 0000 0076        clearNCharOnXY(6,0, 1);
; 0000 0077        showStringOnXY(0, 1, toString(OCR1AL));
; 0000 0078        OCR1AL = 0;
; 0000 0079        }
; 0000 007A 
; 0000 007B        }
; 0000 007C        else if (increasePressedCount == DEBOUNCE_TIME){
; 0000 007D        if (OCR1AL + 10 <= 254){
; 0000 007E        OCR1AL+=10;
; 0000 007F        clearNCharOnXY(6,0, 1);
; 0000 0080        showStringOnXY(0, 1, toString(OCR1AL));
; 0000 0081        }
; 0000 0082        else {OCR1AL = 254;
; 0000 0083        clearNCharOnXY(6,0, 1);
; 0000 0084        showStringOnXY(0, 1, toString(OCR1AL));
; 0000 0085        OCR1AL = 0;
; 0000 0086        }
; 0000 0087        clearNCharOnXY(16,0,0);
; 0000 0088        showStringOnXY(0, 0, "Increasing...");
; 0000 0089        clearNCharOnXY(16,0, 1);
; 0000 008A        showStringOnXY(0, 1, toString(OCR1AL));
; 0000 008B        }
; 0000 008C        }
; 0000 008D    if (decreasePressed && decreasePressedCount > DEBOUNCE_TIME){
; 0000 008E        OCR2--;
; 0000 008F        clearNCharOnXY(16,0,0);
; 0000 0090        showStringOnXY(0, 0, "Decreasing...");
; 0000 0091        clearNCharOnXY(16,0, 1);
; 0000 0092        showStringOnXY(0, 1, toString(OCR2));
; 0000 0093        }
; 0000 0094        */
; 0000 0095 }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;	//unsigned char duty;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0098 {
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0099     if (PIND.2 == 0){
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 009A         increasePressed = true;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 009B     }else{
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 009C         increasePressedCount = 0;
;PCODE: $00000145 VOL: 0
; 0000 009D         increasePressed = false;
;PCODE: $00000146 VOL: 0
; 0000 009E     }
;PCODE: $00000147 VOL: 0
; 0000 009F }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 00A3 {
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00A4      if (PIND.3 == 0){
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00A5         decreasePressed = true;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00A6      }else{
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00A7         decreasePressed = false;
;PCODE: $00000154 VOL: 0
; 0000 00A8         decreasePressedCount = 0;
;PCODE: $00000155 VOL: 0
; 0000 00A9      }
;PCODE: $00000156 VOL: 0
; 0000 00AA }
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;
;void main(void)
; 0000 00AD {
;PCODE: $0000015A VOL: 0
; 0000 00AE lcd_init(16);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00AF // Timer/Counter 0 initialization
; 0000 00B0 // Clock source: System Clock
; 0000 00B1 // Clock value: 7/813 kHz
; 0000 00B2 // Mode: Normal top=0xFF
; 0000 00B3 // OC0 output: Disconnected
; 0000 00B4 // Timer Period: 14/976 ms
; 0000 00B5 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00B6 TCNT0=0x8B;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00B7 OCR0=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00B8 
; 0000 00B9 // Timer/Counter 1 initialization
; 0000 00BA // Clock source: System Clock
; 0000 00BB // Clock value: 125/000 kHz
; 0000 00BC // Mode: Ph. correct PWM top=0x01FF
; 0000 00BD // OC1A output: Non-Inverted PWM
; 0000 00BE // OC1B output: Non-Inverted PWM
; 0000 00BF // Noise Canceler: Off
; 0000 00C0 // Input Capture on Falling Edge
; 0000 00C1 // Timer Period: 8/176 ms
; 0000 00C2 // Output Pulse(s):
; 0000 00C3 // OC1A Period: 8/176 ms Width: 0 us
; 0000 00C4 // OC1B Period: 8/176 ms Width: 0 us
; 0000 00C5 // Timer1 Overflow Interrupt: Off
; 0000 00C6 // Input Capture Interrupt: Off
; 0000 00C7 // Compare A Match Interrupt: Off
; 0000 00C8 // Compare B Match Interrupt: Off
; 0000 00C9 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00CA TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00CB TCNT1H=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00CC TCNT1L=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00CD ICR1H=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00CE ICR1L=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00CF /*
; 0000 00D0 OCR1AH=0x00;
; 0000 00D1 OCR1AL=0x00;
; 0000 00D2 OCR1BH=0x00;
; 0000 00D3 OCR1BL=0x00;
; 0000 00D4 */
; 0000 00D5 //OCR1A = 65000;
; 0000 00D6 OCR1A = 0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00D7 OCR1B = 0;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00D8 // Port D initialization
; 0000 00D9 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00DA DDRD=(1<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00DB PORTD.2 = 1;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00DC PORTD.3 = 1;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00DD 
; 0000 00DE // External Interrupt(s) initialization
; 0000 00DF // INT0: On
; 0000 00E0 // INT0 Mode: Any change
; 0000 00E1 // INT1: On
; 0000 00E2 // INT1 Mode: Any change
; 0000 00E3 // INT2: Off
; 0000 00E4 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00E5 MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00E6 MCUCSR=(0<<ISC2);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00E7 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00E8 
; 0000 00E9 
; 0000 00EA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00EB TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00EC 
; 0000 00ED // Global enable interrupts
; 0000 00EE #asm("sei")
;PCODE: $00000184 VOL: 0
	sei
;PCODE: $00000185 VOL: 0
; 0000 00EF 
; 0000 00F0    clearNCharOnXY(0,1,0);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00F1    showStringOnXY(0,1,toString(OCR1B));
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00F2    clearNCharOnXY(0,0,0);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00F3    showStringOnXY(0,0,toString(OCR1A));
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00F4 while (1)
;PCODE: $000001A8 VOL: 0
; 0000 00F5     {
; 0000 00F6 
; 0000 00F7     }
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00F8 }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;void clearNCharOnXY(int n, int x, int y){
; 0000 00F9 void clearNCharOnXY(int n, int x, int y){
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00FA         /*char *blank = "";
; 0000 00FB         int a;
; 0000 00FC         lcd_gotoxy(x, y);
; 0000 00FD         for (a = 0; a< n;a++)
; 0000 00FE             strcat(blank, " ");
; 0000 00FF             */
; 0000 0100             lcd_gotoxy(0, y);
;PCODE: $000001B0 VOL: 0
;	n -> Y+4
;	x -> Y+2
;	y -> Y+0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0101         lcd_puts("                ");
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0102 }
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0

	.DSEG
_0x34:
	.BYTE 0x11
;
;void showStringOnXY(int x, int y, char *string){
; 0000 0104 void showStringOnXY(int x, int y, char *string){

	.CSEG
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0105         lcd_gotoxy(x, y);
;PCODE: $000001BD VOL: 0
;	x -> Y+4
;	y -> Y+2
;	*string -> Y+0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0106         lcd_puts(string);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0107     }
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;
;char* toString(unsigned long x){
; 0000 0109 char* toString(unsigned long x){
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 010A     char string[55];
; 0000 010B     ltoa(x,string);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;	x -> Y+55
;	string -> Y+0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 010C     return string;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 010D }
;PCODE: $000001D2 VOL: 0
;
;void enterConfigureMode(){
; 0000 010F void enterConfigureMode(){
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0110    clearNCharOnXY(0,1,0);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0111    showStringOnXY(0,1,toString(stepSize));
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0112    clearNCharOnXY(0,0,0);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0113    showStringOnXY(0,0,"Step Size:");
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0114 }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0

	.DSEG
_0x35:
	.BYTE 0xB
;
;void exitConfigureMode(){
; 0000 0116 void exitConfigureMode(){

	.CSEG
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0117    clearNCharOnXY(0,1,0);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0118    showStringOnXY(0,1,toString(OCR1B));
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0119    clearNCharOnXY(0,0,0);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 011A    showStringOnXY(0,0,toString(OCR1A));
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 011B }
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
