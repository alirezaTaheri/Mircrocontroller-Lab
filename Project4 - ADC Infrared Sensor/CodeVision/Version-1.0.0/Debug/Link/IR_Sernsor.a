;/*
; * IR_Sernsor.c
; *
; * Created: 27/10/2019 08:32:34 È.Ù
; * Author: Alireza
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <stdbool.h>
;#include <mega16.h>
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;char *menuItems[] = {"Show ADC Value", "Calibration", "Show ADC Voltage"};

	.DSEG
_0x3:
	.BYTE 0x2C
;char *adcMenuItems[] = {"ADC 1", "ADC 2", "ADC 3"};
_0x5:
	.BYTE 0x12
;char *voltageMenuItems[] = {"ADC 1", "ADC 2", "ADC 3"};
_0x7:
	.BYTE 0x12
;char *calibrationMenuItems[] = {"ADC 1", "ADC 2", "ADC 3"};
_0x9:
	.BYTE 0x12
;int floorValues[3] = {300, 300, 300};
;int adcLastValue[3] = {0, 0, 0};
;int selectedItem = -1;
;int showingItem = 0;
;int adcSelectedItem = -1;
;int adcShowingItem = 0;
;int calibrationSelectedItem = -1;
;int calibrationShowingItem = 0;
;int nextKeyPressedCount = 0;
;bool nextKeyPressed = false;
;int confirmKeyPressedCount = 0;
;bool confirmKeyPressed = false;
;
;void init();
;void showADCValue(int);
;void showStringOnRow(int, char *string);
;void handleLED(int channel);
;bool isNextKeyDebounced();
;bool isConfirmKeyDebounced();
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E // Reinitialize Timer 0 value
; 0000 002F TCNT0=0x64;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0030 // Place your code here
; 0000 0031 if (nextKeyPressed) nextKeyPressedCount++;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0032 if (confirmKeyPressed) confirmKeyPressedCount++;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0033 if (isNextKeyDebounced()){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0034    switch (selectedItem){
;PCODE: $00000024 VOL: 0
; 0000 0035     case -1 :
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0036     showingItem++;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0037     if (showingItem > 2) showingItem = 0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0038     showStringOnRow(1, menuItems[showingItem]);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0039     break;
;PCODE: $00000038 VOL: 0
; 0000 003A     case 0:
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003B     adcShowingItem++;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003C     if (adcShowingItem > 2) adcShowingItem = 0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003D     showStringOnRow(1, adcMenuItems[adcShowingItem]);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003E 
; 0000 003F     break;
;PCODE: $0000004D VOL: 0
; 0000 0040     case 1:
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0041     calibrationShowingItem++;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0042     if (calibrationShowingItem > 2) calibrationShowingItem = 0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0043     showStringOnRow(1, calibrationMenuItems[calibrationShowingItem]);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0044 
; 0000 0045     break;
;PCODE: $00000064 VOL: 0
; 0000 0046     case 2:
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0047     break;
;PCODE: $00000068 VOL: 0
; 0000 0048     default:break;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0049     }
;PCODE: $0000006B VOL: 0
; 0000 004A } if (isConfirmKeyDebounced()){
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 004B    switch (selectedItem){
;PCODE: $00000070 VOL: 0
; 0000 004C     case -1 :
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004D     selectedItem = showingItem;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 004E     showStringOnRow(0, menuItems[selectedItem]);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004F     showStringOnRow(1, adcMenuItems[adcShowingItem]);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0050     break;
;PCODE: $00000087 VOL: 0
; 0000 0051     case 0:
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0052     if (adcSelectedItem != -1){
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0053         adcSelectedItem = -1;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0054         adcShowingItem = 0;
;PCODE: $00000090 VOL: 0
; 0000 0055         selectedItem = -1;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0056         showingItem = 0;
;PCODE: $00000093 VOL: 0
; 0000 0057         showStringOnRow(0, "Please Select");
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0058         showStringOnRow(1, menuItems[showingItem]);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0059     }
; 0000 005A     else{
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 005B     adcSelectedItem = adcShowingItem;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 005C     showStringOnRow(0,"Value:");
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 005D     }
;PCODE: $000000AB VOL: 0
; 0000 005E     break;
;PCODE: $000000AC VOL: 0
; 0000 005F     case 1:
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0060     if (calibrationSelectedItem != -1){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0061         floorValues[calibrationSelectedItem] = adcLastValue[calibrationSelectedItem];
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0062         calibrationSelectedItem = -1;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0063         calibrationShowingItem = 0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0064         selectedItem = -1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0065         showingItem = 0;
;PCODE: $000000C5 VOL: 0
; 0000 0066         showStringOnRow(0, "Please Select");
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0067         showStringOnRow(1, menuItems[showingItem]);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0068         }else{
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0069     calibrationSelectedItem = calibrationShowingItem;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 006A     showStringOnRow(0,"Confirm To Save");
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 006B               }
;PCODE: $000000DD VOL: 0
; 0000 006C     break;
;PCODE: $000000DE VOL: 0
; 0000 006D     case 2:
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 006E     break;
;PCODE: $000000E2 VOL: 0
; 0000 006F     default:break;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0070     }
;PCODE: $000000E5 VOL: 0
; 0000 0071 }
; 0000 0072 }
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0

	.DSEG
_0x21:
	.BYTE 0x33
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0076 {   if(PIND.2 == 1){

	.CSEG
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0077     nextKeyPressed = true;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0078 
; 0000 0079     }else{
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 007A     nextKeyPressed = false;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 007B     nextKeyPressedCount = 0;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 007C     }
;PCODE: $000000F7 VOL: 0
; 0000 007D }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;
;
;    char title[16];
;    char adcselectedString[1];
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0084 {   if (PIND.3 == 1){
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0085    confirmKeyPressed = true;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0086 
; 0000 0087     }else{
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0088     confirmKeyPressed = false;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0089     confirmKeyPressedCount = 0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 008A     }
;PCODE: $00000108 VOL: 0
; 0000 008B }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 008E {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 008F ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000010E VOL: 0
;	adc_input -> Y+0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0090 // Delay needed for the stabilization of the ADC input voltage
; 0000 0091 delay_us(10);
;PCODE: $00000112 VOL: 0
; 0000 0092 // Start the AD conversion
; 0000 0093 ADCSRA|=(1<<ADSC);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0094 // Wait for the AD conversion to complete
; 0000 0095 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0096 ADCSRA|=(1<<ADIF);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0097 return ADCW;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0098 }
;PCODE: $00000120 VOL: 0
;
;void main(void)
; 0000 009B {
;PCODE: $00000121 VOL: 0
; 0000 009C   init();
;PCODE: $00000122 VOL: 0
; 0000 009D   showStringOnRow(0, "Please Select");
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 009E   showStringOnRow(1, menuItems[showingItem]);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 009F // Global enable interrupts
; 0000 00A0 #asm("sei")
;PCODE: $00000131 VOL: 0
	sei
;PCODE: $00000132 VOL: 0
; 0000 00A1 while (1)
;PCODE: $00000133 VOL: 0
; 0000 00A2     {
; 0000 00A3     switch(selectedItem){
;PCODE: $00000134 VOL: 0
; 0000 00A4     case 0 :
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00A5     if (adcSelectedItem != -1){
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00A6         showADCValue(adcSelectedItem);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00A7         }
; 0000 00A8     break;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00A9     case 1 :
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00AA     if (calibrationSelectedItem != -1){
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00AB         showADCValue(calibrationSelectedItem);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00AC         }
; 0000 00AD     break;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00AE     case 2 :
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00AF     break;
;PCODE: $0000014B VOL: 0
; 0000 00B0     default:break;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00B1     }
;PCODE: $0000014E VOL: 0
; 0000 00B2     }
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00B3     }
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0

	.DSEG
_0x2F:
	.BYTE 0xE
;    void showADCValue(int channel){
; 0000 00B4 void showADCValue(int channel){

	.CSEG
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00B5     char string[5];
; 0000 00B6     lcd_gotoxy(0, 1);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;	channel -> Y+5
;	string -> Y+0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00B7     lcd_puts("                ");
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00B8     adcLastValue[channel] = read_adc(channel);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00B9     itoa(adcLastValue[channel], string);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00BA     showStringOnRow(1, string);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00BB     handleLED(channel);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00BC     delay_ms(10);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00BD     }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0

	.DSEG
_0x3D:
	.BYTE 0x11
;
;    void showStringOnRow(int row, char *string){
; 0000 00BF void showStringOnRow(int row, char *string){

	.CSEG
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00C0         lcd_gotoxy(0, row);
;PCODE: $0000017E VOL: 0
;	row -> Y+2
;	*string -> Y+0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00C1         lcd_puts("                ");
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00C2         lcd_gotoxy(0, row);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00C3         lcd_puts(string);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00C4     }
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0

	.DSEG
_0x3E:
	.BYTE 0x11
;    void handleLED(int channel){
; 0000 00C5 void handleLED(int channel){

	.CSEG
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00C6        switch(channel){
;PCODE: $00000191 VOL: 0
;	channel -> Y+0
;PCODE: $00000192 VOL: 0
; 0000 00C7         case 0:
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00C8         if (adcLastValue[channel] > floorValues[channel])
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00C9             PORTC.0 = 1; else PORTC.0 = 0;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00CA         break;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00CB         case 1:
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00CC         if (adcLastValue[channel] > floorValues[channel])
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00CD             PORTC.1 = 1; else PORTC.1 = 0;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00CE         break;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00CF         case 2:
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00D0         if (adcLastValue[channel] > floorValues[channel])
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00D1             PORTC.2 = 1; else PORTC.2 = 0;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00D2         break;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00D3        }
;PCODE: $000001D7 VOL: 0
; 0000 00D4     }
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;
;    bool isNextKeyDebounced(){
; 0000 00D6 _Bool isNextKeyDebounced(){
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00D7         return nextKeyPressed && nextKeyPressedCount == 20;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00D8     }
;PCODE: $000001E9 VOL: 0
;
;    bool isConfirmKeyDebounced(){
; 0000 00DA _Bool isConfirmKeyDebounced(){
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00DB         return confirmKeyPressed && confirmKeyPressedCount == 20;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 00DC     }
;PCODE: $000001F8 VOL: 0
;
;    void init(){
; 0000 00DE void init(){
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00DF     DDRC = 0xff;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00E0 
; 0000 00E1 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00E2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E3 PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 00E4     PORTD.0 = 1;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00E5 // ADC initialization
; 0000 00E6 // ADC Clock frequency: 125/000 kHz
; 0000 00E7 // ADC Voltage Reference: AREF pin
; 0000 00E8 // ADC Auto Trigger Source: ADC Stopped
; 0000 00E9 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 00EA ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00EB SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 00EC //ADCSRA = 0x86;
; 0000 00ED //ADMUX = ADC_VREF_TYPE & 0xff;
; 0000 00EE 
; 0000 00EF // External Interrupt(s) initialization
; 0000 00F0 // INT0: On
; 0000 00F1 // INT0 Mode: Any change
; 0000 00F2 // INT1: On
; 0000 00F3 // INT1 Mode: Any change
; 0000 00F4 // INT2: Off
; 0000 00F5 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00F6 MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 00F7 MCUCSR=(0<<ISC2);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00F8 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 00F9     // Timer/Counter 0 initialization
; 0000 00FA // Clock source: System Clock
; 0000 00FB // Clock value: 31/250 kHz
; 0000 00FC // Mode: Normal top=0xFF
; 0000 00FD // OC0 output: Disconnected
; 0000 00FE // Timer Period: 4/992 ms
; 0000 00FF TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0100 TCNT0=0x64;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0101 OCR0=0x00;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0102 
; 0000 0103 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0104 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0105 
; 0000 0106 lcd_init(16);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0107     }
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
