;/*
; * FrequencyMeter.c
; *
; * Created: 19/10/2019 09:18:07 Þ.Ù
; * Author: Alireza
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;       #include <mega16.h>
;
;char str[255];
;unsigned int previousRising;
;unsigned long elapsedTime;
;unsigned int timerOverflow;
;unsigned long currentTime;
;unsigned long int freq;
;
;unsigned char rov_counter,counter;
;unsigned int starting_edge,ending_edge;
;
;unsigned int digits[11] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0xfd, 0x07, 0xff, 0b01101111, 0b00000000};

	.DSEG
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F // Reinitialize Timer1 value
; 0000 0020 TCNT1H=0xD8F0 >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0021 TCNT1L=0xD8F0 & 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0022 //TCNT1H=0x00;;
; 0000 0023 //TCNT1L=0x00;;
; 0000 0024 timerOverflow++;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0025 
; 0000 0026 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;int c ;
;// Timer1 input capture interrupt service routine
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 002A {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B     currentTime = 256*ICR1H + ICR1L;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002C     PORTC = digits[currentTime % 10];
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002D     freq =  ICR1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E    /* elapsedTime = currentTime + timerOverflow * 65536 - previousRising;
; 0000 002F     c = ICR1H;
; 0000 0030     freq = elapsedTime;//8000000;
; 0000 0031     timerOverflow = 0;
; 0000 0032     previousRising = currentTime;
; 0000 0033      */
; 0000 0034 
; 0000 0035 }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;        char* a;
;        int x;
;void main(void)
; 0000 003A {
;PCODE: $00000031 VOL: 0
; 0000 003B DDRC = 0xff;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003C 
; 0000 003D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003E TCCR1B=(0<<ICNC1) | (1<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003F TCNT1H=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0040 TCNT1L=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0041 ICR1H=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0042 ICR1L=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0043 OCR1AH=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0044 OCR1AL=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0045 OCR1BH=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0046 OCR1BL=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0047 
; 0000 0048 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0049 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 004A 
; 0000 004B // Alphanumeric LCD initialization
; 0000 004C // Connections are specified in the
; 0000 004D // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 004E // RS - PORTB Bit 0
; 0000 004F // RD - PORTB Bit 1
; 0000 0050 // EN - PORTB Bit 2
; 0000 0051 // D4 - PORTB Bit 4
; 0000 0052 // D5 - PORTB Bit 5
; 0000 0053 // D6 - PORTB Bit 6
; 0000 0054 // D7 - PORTB Bit 7
; 0000 0055 // Characters/line: 16
; 0000 0056 lcd_init(16);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0057 
; 0000 0058 
; 0000 0059         lcd_gotoxy(0,0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 005A         delay_ms(50);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005B         lcd_puts("Frequency: ");
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005C         delay_ms(50);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005D 
; 0000 005E // Global enable interrupts
; 0000 005F #asm("sei")
;PCODE: $00000059 VOL: 0
	sei
;PCODE: $0000005A VOL: 0
; 0000 0060  PORTC = digits[10];
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0061 while (1){
;PCODE: $0000005E VOL: 0
; 0000 0062 
; 0000 0063         lcd_gotoxy(0,1);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0064         delay_ms(50);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0065         //sprintf(str, "%d", 1/elapsedTime);
; 0000 0066         //sprintf(str, "%d", TCNT1+timerOverflow*65536);
; 0000 0067         ltoa(freq, str);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0068         sscanf(str, "%d", &freq);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0069         //ltoa(timerOverflow, str);
; 0000 006A         //lcd_putsf(str);
; 0000 006B         //strncpy(a,str, 1);
; 0000 006C         lcd_puts(str);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 006D         delay_ms(50);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006E     }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006F }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0

	.DSEG
_0x4:
	.BYTE 0xC
