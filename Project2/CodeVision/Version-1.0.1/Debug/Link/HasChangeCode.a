;/*
; * HasChangeCode.c
; *
; * Created: 13/10/2019 08:37:14 È.Ù
; * Author: Alireza
; */
;
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdbool.h>
;#include <stdio.h>
;    int validationCode[] = {1, 1, 1, 1};

	.DSEG
;    int validationCodeLength = 4 ;
;    //,1,1, 0,0,0};
;    bool opened = false;
;    bool inputPressed = false;
;    bool resetPressed = false;
;    int inputPressedCount = 0;
;    int resetPressedCount = 0;
;    bool changeCodeMode = false;
;    int inputLength = 0;
;    unsigned int digits[4] = {0x3f, 0x06, 0b01000000};
;    int input[validationCodeLength] = {-1, -1, -1, -1};
;
;
;    void checkCode(){
; 0000 001A void checkCode(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001B     bool correct = true;
; 0000 001C     int a = 0;
; 0000 001D     //if (inputLength == validationCodeLength)
; 0000 001E     for (a = 0; a<validationCodeLength ; a++){
;PCODE: $0000000F VOL: 0
;	correct -> R17
;	a -> R18,R19
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001F         if (validationCode[a] != input[a])
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0020             correct = false;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0021     }// else correct = false;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0022         if (correct){
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0023           PORTC = digits[3];
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0024           PORTA.0 = 1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0025           opened = true;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0026         }
; 0000 0027     }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;    void changeCode(){
; 0000 0029 void changeCode(){
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 002A     int a =0;
; 0000 002B         for (a = 0; a<validationCodeLength;a++)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;	a -> R16,R17
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002C             validationCode[a] = input[a];
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 002D inputPressedCount = 0;
;PCODE: $0000005F VOL: 0
; 0000 002E         inputLength = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 002F         a = 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0030         for (a = 0; a<validationCodeLength; a++)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0031         input[a] = -1;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0032 PORTA.0 = 0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0033         opened = false;
;PCODE: $0000007A VOL: 0
; 0000 0034         changeCodeMode = false;
;PCODE: $0000007B VOL: 0
; 0000 0035     }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;    interrupt [TIM0_OVF] void timer0_ovf_isr(void){
; 0000 0037 interrupt [10] void timer0_ovf_isr(void){
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0038         TCNT0=0xB2;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0039         if (inputPressed)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 003A             inputPressedCount++;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 003B         if (resetPressed)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 003C             resetPressedCount++;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 003D             if (!changeCodeMode && inputPressed && inputPressedCount == 7){
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 003E               PORTC = digits[0];
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 003F               input[inputLength] = 0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0040               inputLength++;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0041               checkCode();
;PCODE: $000000A6 VOL: 0
; 0000 0042               }
; 0000 0043               if (!changeCodeMode && inputPressed && inputPressedCount == 15){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0044               PORTC = digits[1];
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0045               input[inputLength-1] = 1;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0046               checkCode();
;PCODE: $000000BD VOL: 0
; 0000 0047               }
; 0000 0048 
; 0000 0049             if (changeCodeMode && inputPressed && inputPressedCount == 7){
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 004A               PORTC = digits[0];
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 004B               input[inputLength] = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 004C               inputLength++;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 004D               if (inputLength == validationCodeLength)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 004E                 changeCode();
;PCODE: $000000D9 VOL: 0
; 0000 004F               }
;PCODE: $000000DA VOL: 0
; 0000 0050               if (changeCodeMode && inputPressed && inputPressedCount == 15){
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0051               PORTC = digits[1];
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0052               input[inputLength-1] = 1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0053               if (inputLength == validationCodeLength)
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0054                 changeCode();
;PCODE: $000000F4 VOL: 0
; 0000 0055               }
;PCODE: $000000F5 VOL: 0
; 0000 0056               if (resetPressed && resetPressedCount == 15 && !changeCodeMode){
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0057                  changeCodeMode = true;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0058               }
; 0000 0059               else if (resetPressed && resetPressedCount == 15 && changeCodeMode){
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 005A                  changeCodeMode = false;
;PCODE: $00000111 VOL: 0
; 0000 005B                  PORTA.0 = 0;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 005C               }
; 0000 005D               if (changeCodeMode)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 005E                 PORTA.0 = ~PORTA.0;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 005F     }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;
;    interrupt [EXT_INT0] void ext_int0_isr(void){
; 0000 0061 interrupt [2] void ext_int0_isr(void){
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0062     if (PIND.2 == 1){
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0063         if (!changeCodeMode){
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0064         inputPressed = true;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0065         }else if (changeCodeMode) inputPressed = true;}
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0066         else {
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0067         if (!changeCodeMode){
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0068         inputPressed = false;
;PCODE: $0000013B VOL: 0
; 0000 0069         inputPressedCount = 0;
;PCODE: $0000013C VOL: 0
; 0000 006A         PORTC = digits[2];
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 006B         }else if (changeCodeMode){
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 006C             inputPressed = false;
;PCODE: $00000144 VOL: 0
; 0000 006D             inputPressedCount = 0;
;PCODE: $00000145 VOL: 0
; 0000 006E             PORTC = digits[2];
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 006F         }
; 0000 0070             }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0071 
; 0000 0072     }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;
;    interrupt [EXT_INT1] void ext_int1_isr(void){
; 0000 0074 interrupt [3] void ext_int1_isr(void){
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0075     int b = 0;
; 0000 0076         if (PIND.3 == 1){
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;	b -> R16,R17
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0077         if (!changeCodeMode){
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0078         resetPressed = true;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0079         inputPressedCount = 0;
;PCODE: $0000015C VOL: 0
; 0000 007A         inputLength = 0;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 007B         for (b = 0; b<validationCodeLength; b++)
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 007C         input[b] = -1;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 007D PORTA.0 = 0;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 007E         opened = false;
;PCODE: $00000175 VOL: 0
; 0000 007F         }
; 0000 0080         else if (changeCodeMode){
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0081         resetPressed = true;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0082         resetPressedCount = 0;
;PCODE: $0000017C VOL: 0
; 0000 0083         inputLength = 0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0084         for (b = 0; b<validationCodeLength; b++)
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0085         input[b] = -1;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0086 }
; 0000 0087         }else if (PIND.3 == 0) resetPressed = false;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0088     }
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;
;void main(void){
; 0000 008A void main(void){
;PCODE: $000001A1 VOL: 0
; 0000 008B     DDRA = 0b00000001;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 008C     DDRD = 0b00000000;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 008D     DDRC = 0xff;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 008E     PORTC = 0b00000000;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 008F     PORTC = digits[2];
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0090     PORTA.0 = 0;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0091     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0092     TCNT0=0x06;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0093     OCR0=0x00;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0094     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0095     GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0096     MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0097     MCUCSR=(0<<ISC2);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0098     GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0099 
; 0000 009A     #asm("sei");
;PCODE: $000001C0 VOL: 0
	sei
;PCODE: $000001C1 VOL: 0
; 0000 009B while (1){
;PCODE: $000001C2 VOL: 0
; 0000 009C 
; 0000 009D     }
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 009E }
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;
