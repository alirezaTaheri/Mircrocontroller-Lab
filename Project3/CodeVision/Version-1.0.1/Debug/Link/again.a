;/*
; * again.c
; *
; * Created: 24/10/2019 05:41:35 È.Ù
; * Author: Alireza
; */
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdlib.h>
;char str[255];
;/*define Port C as output for pulse width*/ #define period_out PORTC
;unsigned char ov_counter;   /*counter for timer 1 overflow*/ unsigned int starting_edge, ending_edge;  /*storage for tim ...
;/*Timer 1 overflow ISR*/ interrupt [TIM1_OVF] void timer1_ovf_isr(void) { ++ov_counter;   /*increment counter when overf ...
; 0000 000D  interrupt [9] void timer1_ovf_isr(void) { ++ov_counter;    }

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;/*Timer 1 input capture ISR*/ interrupt [TIM1_CAPT] void timer1_capt_isr(void) {
; 0000 000E  interrupt [6] void timer1_capt_isr(void) {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000F /*combine the two 8-bit capture registers into the 16-bit count*/ ending_edge = 256*ICR1H + ICR1L; /*get end time for pe ...
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0010 ltoa(~(clocks / 750), str);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0011 lcd_gotoxy(0,0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0012 lcd_puts("Hello");
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0013 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0

	.DSEG
_0x3:
	.BYTE 0x6
;void main(void) { DDRC=0xFF;  /*set Port C for output*/ TCCR1A = 0;  /*disable all waveform functions*/ TCCR1B = 0xC2;/* ...
; 0000 0014 void main(void) { DDRC=0xFF;   TCCR1A = 0;   TCCR1B = 0xC2; TIMSK = 0x24;

	.CSEG
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0015 lcd_init(16);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0016 #asm("sei") /*enable global interrupt bit*/
;PCODE: $00000047 VOL: 0
	sei
;PCODE: $00000048 VOL: 0
; 0000 0017 while (1) { ; /*do nothing here*/      }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0018 }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
