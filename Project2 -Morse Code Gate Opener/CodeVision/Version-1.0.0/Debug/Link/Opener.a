;/*
; * Opener.c
; *
; * Created: 13/10/2019 12:55:10 È.Ù
; * Author: Alireza
; */
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdbool.h>
;#include <stdio.h>
;    int validationCode[] = {1, 1, 1, 1};

	.DSEG
;    int validationCodeLength = 4 ;
;    //,1,1, 0,0,0};
;    bool opened = false;
;    bool pressed = false;
;    int counter = 0;
;    int codeLength = 0;
;    unsigned int digits[4] = {0x3f, 0x06, 0b01000000};
;    int code[validationCodeLength] = {-1, -1, -1, -1};
;    void checkCode(){
; 0000 0013 void checkCode(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0014     bool correct = true;
; 0000 0015     int a = 0;
; 0000 0016     //if (codeLength == validationCodeLength)
; 0000 0017     for (a = 0; a<validationCodeLength ; a++){
;PCODE: $0000000F VOL: 0
;	correct -> R17
;	a -> R18,R19
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0018         if (validationCode[a] != code[a])
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0019             correct = false;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001A     }// else correct = false;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001B         if (correct){
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001C           PORTC = digits[3];
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 001D           PORTA.0 = 1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 001E         }
; 0000 001F     }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;    interrupt [TIM0_OVF] void timer0_ovf_isr(void){
; 0000 0021 interrupt [10] void timer0_ovf_isr(void){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0022         TCNT0=0xB2;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0023         opened = ~opened;
;PCODE: $00000041 VOL: 0
; 0000 0024         if (pressed)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0025             counter++;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0026             if (pressed && counter == 7){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0027               PORTC = digits[0];
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0028               code[codeLength] = 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0029               codeLength++;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002A               checkCode();
;PCODE: $0000005C VOL: 0
; 0000 002B               }
; 0000 002C               if (pressed && counter == 15){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 002D               PORTC = digits[1];
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 002E               code[codeLength-1] = 1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 002F               checkCode();
;PCODE: $00000071 VOL: 0
; 0000 0030               }
; 0000 0031 
; 0000 0032         //if (opened)
; 0000 0033           //  PORTA.0 = 1;
; 0000 0034           //  else PORTA.0 = 0;
; 0000 0035     }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;    interrupt [EXT_INT0] void ext_int0_isr(void){
; 0000 0037 interrupt [2] void ext_int0_isr(void){
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0038     if (PIND.2 == 1)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0039         pressed = true;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 003A         else {pressed = false;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 003B         counter = 0;
;PCODE: $00000080 VOL: 0
; 0000 003C         PORTC = digits[2];
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 003D         }
;PCODE: $00000084 VOL: 0
; 0000 003E 
; 0000 003F     }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;    interrupt [EXT_INT1] void ext_int1_isr(void){
; 0000 0041 interrupt [3] void ext_int1_isr(void){
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0042     int b = 0;
; 0000 0043         if (PIND.3 == 1){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;	b -> R16,R17
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0044         counter = 0;
;PCODE: $00000091 VOL: 0
; 0000 0045         codeLength = 0;
;PCODE: $00000092 VOL: 0
; 0000 0046         for (b = 0; b<validationCodeLength; b++)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0047         code[b] = -1;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0048 PORTA.0 = 0;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0049         }
; 0000 004A     }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;
;void main(void){
; 0000 004C void main(void){
;PCODE: $000000AE VOL: 0
; 0000 004D     DDRA = 0b00000001;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 004E     DDRD = 0b00000000;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 004F     DDRC = 0xff;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0050     PORTC = 0b00000000;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0051     PORTC = digits[2];
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0052     PORTA.0 = 0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0053     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0054     TCNT0=0x06;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0055     OCR0=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0056     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0057     GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0058     MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0059     MCUCSR=(0<<ISC2);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 005A     GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 005B 
; 0000 005C     #asm("sei");
;PCODE: $000000CD VOL: 0
	sei
;PCODE: $000000CE VOL: 0
; 0000 005D while (1){
;PCODE: $000000CF VOL: 0
; 0000 005E 
; 0000 005F     }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0060 }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
